; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31933.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__CD417A16_concurrencysal@h DB 01H
__18C11F8D_sal@h DB 01H
__BD42D05E_vadefs@h DB 01H
__2DC9DF70_vcruntime@h DB 01H
__C9149A6D_xkeycheck@h DB 01H
__94F3B4AE_yvals_core@h DB 01H
__C54FBE38_stdint@h DB 01H
__2308314D_cstdint DB 01H
__04C75F1C_corecrt@h DB 01H
__92857972_corecrt_math@h DB 01H
__A29DED85_math@h DB 01H
__494656A0_corecrt_malloc@h DB 01H
__0C5B3DCC_stddef@h DB 01H
__F1F53BCE_corecrt_search@h DB 01H
__DD5AA43A_corecrt_wstdlib@h DB 01H
__7B399007_limits@h DB 01H
__71F46169_stdlib@h DB 01H
__9E56D030_cstdlib DB 01H
__CDB0EEF0_float@h DB 01H
__D5150992_cfloat DB 01H
__1AB9F2C2_climits DB 01H
__C44F8F6B_corecrt_stdio_config@h DB 01H
__A7F89B2B_corecrt_wstdio@h DB 01H
__B5C48800_stdio@h DB 01H
__A651C215_cstdio DB 01H
__15E49872_errno@h DB 01H
__6BB4896E_vcruntime_string@h DB 01H
__184F7456_corecrt_memcpy_s@h DB 01H
__E387ED1C_corecrt_wconio@h DB 01H
__78D0C915_corecrt_wctype@h DB 01H
__02A4DD57_corecrt_wdirect@h DB 01H
__A056EFF3_corecrt_share@h DB 01H
__91FC0EDF_corecrt_wio@h DB 01H
__6619318A_corecrt_wprocess@h DB 01H
__5B29309E_corecrt_wstring@h DB 01H
__18070508_corecrt_wtime@h DB 01H
__3D2AFB26_types@h DB 01H
__72103B05_stat@h DB 01H
__4BE26BFD_wchar@h DB 01H
__3CDA1446_cwchar DB 01H
__99FA516B_intrin0@inl@h DB 01H
__8CEB98C2_intrin0@h DB 01H
__B83F831D_isa_availability@h DB 01H
__05E338F6_xtr1common DB 01H
__3B9D0A9D_cstddef DB 01H
__D7870C25_initializer_list DB 01H
__5E44C2A9_xstddef DB 01H
__B3F344F6_limits DB 01H
__E81B5085_vcruntime_new@h DB 01H
__130137D5_vcruntime_new_debug@h DB 01H
__8CF369C8_crtdbg@h DB 01H
__95C621C9_crtdefs@h DB 01H
__FEED0ABF_use_ansi@h DB 01H
__2816668F_yvals@h DB 01H
__87BD5CA6_type_traits DB 01H
__E5D9469F_malloc@h DB 01H
__C78E68C1_corecrt_terminate@h DB 01H
__510B0051_eh@h DB 01H
__1BEF3287_vcruntime_exception@h DB 01H
__5D994F5F_exception DB 01H
__7E4C13A5_new DB 01H
__5795C389_xatomic@h DB 01H
__A95B55BB_utility DB 01H
__EE76B579___msvc_iter_core@hpp DB 01H
__82377222_corecrt_memory@h DB 01H
__F787F5CD_string@h DB 01H
__D2C478D0_cstring DB 01H
__A997C6C5_xutility DB 01H
__C3CE3678_xmemory DB 01H
__FE5E3416_vector DB 01H
__2CDAE719_main@cpp DB 01H
msvcjmc	ENDS
PUBLIC	?dotProduct@@YAMPEAM0H@Z			; dotProduct
PUBLIC	__JustMyCode_Default
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dotProduct@@YAMPEAM0H@Z DD imagerel $LN19
	DD	imagerel $LN19+203
	DD	imagerel $unwind$?dotProduct@@YAMPEAM0H@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dotProduct@@YAMPEAM0H@Z DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\paniw\Desktop\Peiravani_dotProduct\Peiravani_dotProduct\Peiravani_dotProduct\main.cpp
;	COMDAT ?dotProduct@@YAMPEAM0H@Z
_TEXT	SEGMENT
arr_1$ = 48
arr_2$ = 56
size$ = 64
?dotProduct@@YAMPEAM0H@Z PROC				; dotProduct, COMDAT

; 4    : float dotProduct(float* arr_1, float* arr_2, const int size) {

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rcx
	movsxd	rbx, r8d
	lea	rcx, OFFSET FLAT:__2CDAE719_main@cpp
	mov	rsi, rdx
	call	__CheckForDebuggerJustMyCode
	xor	r9d, r9d
	sub	rdi, rsi
	mov	r8, rbx
	vxorps	xmm3, xmm3, xmm3
	cmp	rbx, 4
	jl	SHORT $LN16@dotProduct

; 5    :     float result = 0;
; 6    : 
; 7    :     // Iterate through both vectors and calculate the dot product
; 8    :     for (int i = 0; i < size; i++) {

	lea	rcx, QWORD PTR [rbx-4]
	shr	rcx, 2
	lea	rax, QWORD PTR [rsi+4]
	inc	rcx
	lea	r9, QWORD PTR [rcx*4]
	npad	2
$LL13@dotProduct:

; 9    :         result += arr_1[i] * arr_2[i];

	vmovss	xmm0, DWORD PTR [rdi+rax-4]
	vmulss	xmm1, xmm0, DWORD PTR [rax-4]
	vmovss	xmm2, DWORD PTR [rdi+rax]
	vmulss	xmm0, xmm2, DWORD PTR [rax]
	lea	rax, QWORD PTR [rax+16]
	vaddss	xmm3, xmm1, xmm3
	vmovss	xmm1, DWORD PTR [rdi+rax-12]
	vmulss	xmm2, xmm1, DWORD PTR [rax-12]
	vaddss	xmm4, xmm3, xmm0
	vmovss	xmm0, DWORD PTR [rdi+rax-8]
	vmulss	xmm1, xmm0, DWORD PTR [rax-8]
	vaddss	xmm3, xmm4, xmm2
	vaddss	xmm3, xmm3, xmm1
	sub	rcx, 1
	jne	SHORT $LL13@dotProduct
$LN16@dotProduct:

; 5    :     float result = 0;
; 6    : 
; 7    :     // Iterate through both vectors and calculate the dot product
; 8    :     for (int i = 0; i < size; i++) {

	cmp	r9, r8
	jge	SHORT $LN17@dotProduct
	lea	rax, QWORD PTR [rsi+r9*4]
	sub	r8, r9
$LC8@dotProduct:

; 9    :         result += arr_1[i] * arr_2[i];

	vmovss	xmm1, DWORD PTR [rax+rdi]
	vmulss	xmm2, xmm1, DWORD PTR [rax]
	lea	rax, QWORD PTR [rax+4]
	vaddss	xmm3, xmm3, xmm2
	sub	r8, 1
	jne	SHORT $LC8@dotProduct
$LN17@dotProduct:

; 10   :     }
; 11   :     return result;
; 12   : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	vmovaps	xmm0, xmm3
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?dotProduct@@YAMPEAM0H@Z ENDP				; dotProduct
_TEXT	ENDS
END
